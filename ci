#!/usr/bin/make -f

.PHONY: docker docker-push docker-release-tag kubernetes kubernetes-custom docker-run

DOCKER_NAMESPACE ?= mapycz-dev
DOCKER_REGISTRY ?= docker.ops.iszn.cz
DOCKER_OPTS ?= $(if $(CI),,--no-cache=false) # use 'no cache' outside of CI

NAMESPACE ?= local-dev

KUBE_TOKEN ?=
KUBE_CONFIG_DIR ?= $(HOME)/.kube
KUBE_CONTEXT ?= $(NAMESPACE)
KUBE_DIR = kubernetes/$(KUBE_CONTEXT)

CI_SCRIPTS_DEVELOPMENT_DOCKER_REGISTRY_USER ?=
CI_SCRIPTS_DEVELOPMENT_DOCKER_REGISTRY_PASSWORD_FILE ?=
CI_SCRIPTS_DEVELOPMENT_DOCKER_REGISTRY ?= $(DOCKER_REGISTRY)

CI_PIPELINE_ID ?= local_build_$(shell hostname)_$(USER)
CI_COMMIT_TAG ?= $(shell cat .git/HEAD | sed 's/.*\///')

COMPONENT = mapi-address-example

IMAGE_CI 		  = $(DOCKER_REGISTRY)/mapycz/ci-scripts
IMAGE_COMPOSE     = $(DOCKER_REGISTRY)/mapycz/jenkins-docker-compose

TIMESTAMP = $(shell date +%s)

DOCKER_RUN_PARAMS = \
		-t \
		--rm \
		-e HOME=/tmp \
		-u $$(id -u):$$(getent group docker | awk -F : '{print $$3}') \
		-e CI_PIPELINE_ID=$(CI_PIPELINE_ID) \
		-e CI_COMMIT_TAG=$(CI_COMMIT_TAG) \
		-e CI_BUILD_ID=$(CI_BUILD_ID) \
		-e CI_BUILD_NAME=$(CI_BUILD_NAME) \
		-e CI=$(CI) \
		-e CI_SCRIPTS_DEVELOPMENT_DOCKER_REGISTRY=$(CI_SCRIPTS_DEVELOPMENT_DOCKER_REGISTRY) \
        -e CI_SCRIPTS_DEVELOPMENT_DOCKER_REGISTRY_USER='$(CI_SCRIPTS_DEVELOPMENT_DOCKER_REGISTRY_USER)' \
        -e CI_SCRIPTS_DEVELOPMENT_DOCKER_REGISTRY_PASSWORD_FILE=$(CI_SCRIPTS_DEVELOPMENT_DOCKER_REGISTRY_PASSWORD_FILE) \
		-e TIMESTAMP=$(TIMESTAMP) \
		-e COMPONENT=$(COMPONENT) \
		-e DOCKER_NAMESPACE=$(DOCKER_NAMESPACE) \
		-h "$(shell hostname -f)" \
		-w "$(CURDIR)" \
		-v "$(CURDIR):$(CURDIR)" \
		-v "$(KUBE_CONFIG_DIR):/tmp/.kube" \
		-v "/var/run/docker.sock:/var/run/docker.sock" \
		-v "/etc/group:/etc/group:ro" \
		-v "/etc/passwd:/etc/passwd:ro" \
		-v "$(CI_SCRIPTS_DEVELOPMENT_DOCKER_REGISTRY_PASSWORD_FILE):$(CI_SCRIPTS_DEVELOPMENT_DOCKER_REGISTRY_PASSWORD_FILE):ro" \
		-v "$(HOME)/.docker:/tmp/.docker:$(if $(CI),rw,ro)" \
		-v "$(HOME)/.ssh:$(HOME)/.ssh:ro"


# Runs bash script in CI docker.
# run_ci, <bash script>
define run_ci
	docker pull $(IMAGE_CI) 1>&2;
	docker run $(DOCKER_RUN_PARAMS) $(IMAGE_CI) /bin/bash -ec '$1';
endef


# Gitlab CI makes target 'kubernetes-custom' with image specified in ENV.
ifeq ($(origin DOCKER_IMAGE_CUSTOM), undefined)
    DOCKER_IMAGE = $(shell $(call run_ci, . /ci/common.sh; get_ci_docker_image_name))
else
    DOCKER_IMAGE = $(DOCKER_IMAGE_CUSTOM)
    $(info Overriding DOCKER_IMAGE with DOCKER_IMAGE_CUSTOM = $(DOCKER_IMAGE))
endif

docker:
	$(call run_ci, \
		/ci/docker-build.sh -- $(DOCKER_OPTS); \
	)

docker-push:
	$(call run_ci, \
		/ci/docker-release-ci.sh --overwrite; \
	)

docker-release-tag: docker-push
	$(call run_ci, \
		/ci/test-version-match.sh --tagged-version-prefix=""; \
		/ci/docker-release.sh; \
	)

kubernetes kubernetes-custom:
	$(call run_ci, \
		set -x; \
		export DOCKER_IMAGE=$(DOCKER_IMAGE); \
		\
		rm -rf "$(KUBE_DIR)" && mkdir -p $(KUBE_DIR); \
		\
		kubectl config use-context $(KUBE_CONTEXT); \
		kubectl config set-credentials default --token=$(KUBE_TOKEN); \
		\
		/ci/kubernetes-config.sh --component $(COMPONENT) --env $(KUBE_CONTEXT); \
		/ci/kubernetes-deploy.sh --namespace $(NAMESPACE) --env $(KUBE_CONTEXT) --deploy-timeout 600; \
	)

# NOT used in CI workflow
docker-run:
	docker run --rm -it \
		-p 8080:8080 \
		-p 3903:3903 \
		--env-file ./conf/local-dev.env $(DOCKER_IMAGE)

